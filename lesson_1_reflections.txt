How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    The command gave me both the versions next to each other line by line,
    so I was able to easily compare the differences between the two
    versions. Also, I didn't have to go through the entire code, because
    the command returned only those lines which have changed in the
    new version.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    One, I don't have to rely on memory to know what changes I have made.
    Two, I don't have to worry about documenting every change I make in my code.
    Three, I don't have to manually undo the changes if I ever want to revert.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    PRO: I'll know when a logical change has happened. More control.
    CON: I stand to lose data when unexpected something occurs, like PC crashes.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Version control systems like Git are intended for programming files
    which are usually interrelated, so they allow multi-file commits.
    Systems like Google Docs are intended for creating standalone files
    usually, so they treat each file separately.


How can you use the commands git log and git diff to view the history of files?

    I use git log to view the history of commits along with the comments for
    each commit.
    I use git diff <current id> <prev id> to compare the difference between
    two commits.

How might using version control make you more confident to make changes that
could break something?

    I could always checkout to a version just before the big bug was introduced.

Now that you have your workspace set up, what do you want to try using Git for?

    Version control, I guess.